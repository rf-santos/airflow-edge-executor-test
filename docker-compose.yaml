x-airflow-common-env: &airflow-common-env
  AIRFLOW__CORE__LOAD_EXAMPLES: "False"
  AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
  AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
  AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
  AIRFLOW__CORE__INTERNAL_API_SECRET_KEY: ${INTERNAL_API_SECRET_KEY}
  AIRFLOW__EDGE__API_ENABLED: "True"
  AIRFLOW__EDGE__API_URL: http://airflow-webserver:8080/edge_worker/v1/rpcapi
  AIRFLOW__EDGE__EDGE_WORKER_API_SECRET_KEY: ${EDGE_WORKER_API_SECRET_KEY}
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

x-airflow-web-env: &airflow-web-env
  <<: *airflow-common-env
  AIRFLOW__WEBSERVER__SECRET_KEY: ${WEBSERVER_SECRET_KEY}
  AIRFLOW__WEBSERVER__WEB_SERVER_HOST: 0.0.0.0
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080

x-edge-worker-common-env: &edge-worker-common-env
  AIRFLOW_HOME: /opt/airflow
  AIRFLOW__EDGE__API_URL: http://airflow-webserver:8080/edge_worker/v1/rpcapi
  AIRFLOW__EDGE__EDGE_WORKER_API_SECRET_KEY: ${EDGE_WORKER_API_SECRET_KEY}
  AIRFLOW__CORE__INTERNAL_API_SECRET_KEY: ${INTERNAL_API_SECRET_KEY}
  AIRFLOW__CLI__ACTION_LOGGING_ENABLED: "False"
  PORT: "8080"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow_edge_network

  redis:
    image: redis:6.2-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow_edge_network

  airflow-init:
    image: airflow-edge:latest
    build:
      context: .
      dockerfile: airflow.Dockerfile
    environment:
      <<: *airflow-web-env
      AIRFLOW__CORE__EXECUTOR: airflow.providers.edge3.executors.edge_executor.EdgeExecutor
    user: "50000:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    command: bash /opt/airflow/scripts/airflow_init.sh
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - airflow_edge_network

  airflow-webserver:
    image: airflow-edge:latest
    # build:
    #   context: .
    #   dockerfile: airflow.Dockerfile
    environment:
      <<: *airflow-web-env
      AIRFLOW__CORE__EXECUTOR: airflow.providers.edge3.executors.edge_executor.EdgeExecutor
    user: "50000:0"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./webserver_config.py:/opt/airflow/webserver_config.py:ro
      - ./scripts:/opt/airflow/scripts
    command: airflow webserver
    networks:
      - airflow_edge_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

  airflow-scheduler:
    image: airflow-edge:latest
    environment:
      <<: *airflow-common-env
      AIRFLOW__CORE__EXECUTOR: airflow.providers.edge3.executors.edge_executor.EdgeExecutor
    user: "50000:0"
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    command: airflow scheduler
    networks:
      - airflow_edge_network

  airflow-triggerer:
    image: airflow-edge:latest
    environment:
      <<: *airflow-common-env
      AIRFLOW__CORE__EXECUTOR: airflow.providers.edge3.executors.edge_executor.EdgeExecutor
    user: "50000:0"
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    command: airflow triggerer
    networks:
      - airflow_edge_network

  airflow-rbac-init:
    image: airflow-edge:latest
    environment:
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${WEBSERVER_SECRET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    user: "50000:0"
    depends_on:
      airflow-webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    command: python /opt/airflow/scripts/setup_rbac.py
    networks:
      - airflow_edge_network
    restart: "no"

  team_a_edge_worker:
    build:
      context: .
      dockerfile: edge-executors/team-a.Dockerfile
    environment:
      <<: *edge-worker-common-env
      EDGE_EXECUTOR_QUEUES: team_a_queue
      EDGE_EXECUTOR_HOSTNAME: team_a_edge_worker
      EDGE_EXECUTOR_CONCURRENCY: "4"
    ports:
      - "8081:8080"
    volumes:
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
    networks:
      - airflow_edge_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  team_b_edge_worker:
    build:
      context: .
      dockerfile: edge-executors/team-b.Dockerfile
    environment:
      <<: *edge-worker-common-env
      EDGE_EXECUTOR_QUEUES: team_b_queue
      EDGE_EXECUTOR_HOSTNAME: team_b_edge_worker
      EDGE_EXECUTOR_CONCURRENCY: "4"
    ports:
      - "8082:8080"
    volumes:
      - ./logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
    networks:
      - airflow_edge_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  postgres_data:


networks:
  airflow_edge_network:
    driver: bridge
